#!/usr/bin/env luvit

local FS = require ("fs")
local JSON = require ("json")
local Lumit = require ("lumit")

Lumit.VERSION = "0.3"

function show_help()
	print [[
lum - luvit module manager

 Package:
    -b, build            compile module
    -c, clean ([pkg])    clean module
    -D, deploy [path]    install current package into destination
    -d, deps             fetch, build and install all dependencies
    -i, install [pkg]    install given package (pkg@repo to force repo)
    -u, upgrade [pkg]    reinstall given package (")
    -I, info ([pkg])     pretty print ./package.lua or in modules/pkg
    -l, ls, list         alias for 'ls'. list all installed packages
    -r, remove [pkg]     alias for 'lum rm' (uninstall package)

 Repository:
    -j, json             create json from current package
    -p, dist             create distribution distribution package
    -P, push [path]      push json from file or directory to REPOS
    -s, search [str]     search in pkg database
    -S, sync             synchronize local database from remote repositories
    -v, version          show version

 Environment and ~/.lum/config:
    CC, CFLAGS, LDFLAGS, LUA_DIR, LUVIT_DIR, USER, PUSH, REPOS
    REPOS=http://lolcathost.org/lum/pancake
    PUSH=scp $0 yourhost:/srv/http/www/lum
]]
end

-- copypasta.. move to Utils
local table = require ("table")
function split(str, pat)
        local t = {}  -- NOTE: use {n = 0} in Lua-5.0
        local fpat = "(.-)" .. pat
        local last_end = 1
        local s, e, cap = str:find (fpat, 1)
        while s do
                if s ~= 1 or cap ~= "" then
			table.insert(t, cap)
                end
                last_end = e+1
                s, e, cap = str:find(fpat, last_end)
        end
        if last_end <= #str then
                cap = str:sub(last_end)
                table.insert(t, cap)
        end
        return t
end

-- TODO: move outside!
function getsource(path, fn)
	if not path then path = "." end
	--p("getsource", path)
	--- TODO: Add support for .svn
	--p(path.."/.git")
	if FS.exists_sync (path.."/.git") then
		local fd = FS.open (path.."/.git/config", "r", 0644, function (err, fd)
			if err then
				p ("cannot find "..path.."/.git/config");
				process.exit (1)
			end
					--fn (err, t, u)
			FS.read (fd, 0, 4096, function (err, data)
				if err then
					p ("error reading\n");
					process.exit (1)
				end
				local t = "git"
				local u = "git://"
				local s = data:find ("url = ")
				if s>0 then
					data = data:sub (s+6)
					local n = data:find ("\n")
					if n then
						data = data:sub (0, n-1)
					end
					n = data:find ("github")
					if n>0 then
						data = "git://github.com/"..
							data:sub (n+11)
					end
					u = data
				end
				FS.close (fd, function (err)
					fn (err, t, u)
				end)
			end)
		end)
	elseif FS.exists_sync (path.."/.hg") then
		local fd = FS.open (path.."/.hg/hgrc", "r", 0644, function (err, fd)
			if err then
				p ("cannot find "..path.."/.hg/hgrc");
				process.exit (1)
			end
			FS.read (fd, 0, 4096, function (err, data)
				if err then
					p ("error reading\n");
					process.exit (1)
				end
				local t = "hg"
				local u = "ssh://"
				local s = data:find ("http://")
				if s<1 then	
					s = data:find ("ssh://")
				end
				if s>0 then
					data = data:sub (s)
					local n = data:find ("\n")
					if n then
						data = data:sub (0, n-1)
					end
					u = data
				end
				FS.close (fd, function (err)
					fn (err, t, u)
				end)
			end)
		end)
	else
	--	fn (err, "dir", "")
	end
end

local FS = require ("fs")
local home = process.env['HOME']
FS.readFile (home.."/.lum/config", function (err, data)
	if not err then
		-- TODO: process env override config? --
		local ls = split (data, "\n") 
		for i=1,#ls do
			local row = split (ls[i], "=")
			if (row and row[1] and row[2]) then
				process.env[row[1]] = row[2]
			end
		end
	end

	-- hacky! use a table
	Lumit:init (function ()
		local a0 = process.argv[1]
		if not a0 then
			Lumit:deps (function()
				Lumit:build ()
			end)
		elseif a0 == "build" or a0 == "-b" then
			Lumit:build ()
		elseif a0 == "deps" or a0 == "-d" then
			Lumit:deps()
		elseif a0 == "version" or a0 == "-v" then
			print ("lum "..Lumit.VERSION.." copyleft pancake")
		elseif a0 == "clean" or a0 == "-c" then
			Lumit:clean (process.argv[2])
		elseif a0 == "search" or a0 == "-s" then
			Lumit:search (process.argv[2])
		elseif a0 == "upgrade" or a0 == "-u" then
			Lumit.UPDATE = true
			Lumit:upgrade (process.argv[2])
		elseif a0 == "install" or a0 == "-i" then
			local i = 2
			while process.argv[i] do
				Lumit:install (process.argv[i])
				i = i + 1
			end
		elseif a0 == "deploy" or a0 == "-D" then
			Lumit:deploy (process.argv[2])
		elseif a0 == "remove" or a0 == "rm" or a0 == "-r" then
			local i = 2
			while process.argv[i] do
				Lumit:uninstall (process.argv[i])
				i = i + 1
			end
		elseif a0 == "-S" or a0 == "sync" then
			Lumit:sync ()
		elseif a0 == "list" or a0 == "-l" or a0 == "ls" then
			Lumit:list ()
		elseif a0 == "help" or a0 == "-h" then
			show_help ()
		elseif a0 == "dist" or a0 == "-p" then
			Lumit:dist ()
		elseif a0 == "info" or a0 == "-I" then
			Lumit:info (process.argv[2], function (pkg)
				if not pkg then
					p ("Module is not installed")
				else
					p (process.argv[2] or "./package.lua", pkg)
				end
			end)
		elseif a0 == "push" or a0 == "-P" then
			Lumit:push (process.argv[2])
		elseif a0 == "json" or a0 == "-j" then
			print ("[")
			local argv2 = process.argv[2] or ""
			local dir = argv2
			if not (dir:sub (1,1) == "/") then
				dir = process.cwd ().."/"..dir
			end
			local ctr = 1
			if FS.exists_sync (dir.."/package.lua") then
				ctr = 0
			end
			showjson (dir, function (x)
				if x then 
					if ctr == 0 then 
						print (x)
						print ("]")
						return
					else
						print (x..",")
					end
				else
					if ctr == 0 then 
						print ("]")
						return
					end
				end
				FS.readdir (dir, function (err, files)
					if err then
						p ("ERROR", "readdir")
						process.exit (1)
					end
					local ctr = #files
					for i=1,#files do
						showjson (dir.."/"..files[i], function (x)
							ctr = ctr-1
							if x then
								if ctr == 0 then 
									print (x)
									print ("]")
								else
									print (x..",")
								end
							else
								if ctr == 0 then 
									print ("]")
								end
							end
						end)
					end
				end)
			end)
		else
			p ("ERROR", "Unknown argument: ".. a0)
		end
	end)
end)

-- XXX: dupped in modules/lumit/init.lua at Lumit:json()
function showjson(path, fn)
	if path then
		if not (path:sub(1,1) == "/") then
			path = process.cwd().."/"..path
		end
	else
		path = process.cwd().."/"
	end

	if FS.exists_sync (path.."/package.lua") then
		Lumit:info (path.."/package", function (pkg)
			if not pkg then 
				fn (nil)
				return
			end
			local j = {}
			j.name = pkg.name
			j.version = pkg.version
			j.description = pkg.description
			getsource (path, function (err, t, u)
				j['type'] = t
				j['url'] = u
				fn (JSON.stringify (j))
			end)
		end)
	else
		fn (nil)
	end
end
