#!/usr/bin/env luvit

local Lumit = require ("lumit")

function show_help()
	print [[
lum - luvit modules

 Actions:
    -d, deps             fetch, build and install all dependencies
    -b, build            compile module
    -c, clean            clean module
    -D, deploy [path]    install current package into destination
    -i, install [pkg]    install given package
    -r, remove [pkg]     alias for 'lum rm' (uninstall package)
    -I, info             pretty print ./package.lua
    -l, ls, list         alias for 'ls'. list all installed packages

 Package repository:
    -s, search [str]     search in pkg database
    -j, json             create json from current package
    -p, push [json]      push json file to remove repository
    -u, update           update local database from remote repositories

 Environment and ~/.lum/config:
    CC, CFLAGS, LDFLAGS, LUA_DIR, LUVIT_DIR, USER, REPOS
]]
end

-- TODO:
--    update           - update database from remote server (TODO)
--    push             - push this package to the server (TODO)
--    LUVIT_REPO .. 

-- copypasta.. move to Utils
local table = require ("table")
function split(str, pat)
        local t = {}  -- NOTE: use {n = 0} in Lua-5.0
        local fpat = "(.-)" .. pat
        local last_end = 1
        local s, e, cap = str:find (fpat, 1)
        while s do
                if s ~= 1 or cap ~= "" then
			table.insert(t, cap)
                end
                last_end = e+1
                s, e, cap = str:find(fpat, last_end)
        end
        if last_end <= #str then
                cap = str:sub(last_end)
                table.insert(t, cap)
        end
        return t
end

-- TODO: move outside!
local FS = require ("fs")
local JSON = require ("lumit/json")
function getsource(fn)
	--- TODO: Add support for .svn and .hg
	if FS.exists_sync (".git") then
		local fd = FS.open (".git/config", "r", 0644, function (err, fd)
			if err then
				p ("cannot find .git/config");
				process.exit (1)
			end
			FS.read (fd, 0, 4096, function (err, data)
				if err then
					p ("error reading\n");
					process.exit (1)
				end
				local t = "git"
				local u = "git://"
				local s = data:find ("url = ")
				if s>0 then
					data = data:sub (s+6)
					local n = data:find ("\n")
					if n then
						data = data:sub (0, n-1)
					end
					n = data:find ("github")
					if n>0 then
						data = "git://github.com/"..
							data:sub (n+11)
					end
					u = data
				end
				FS.close (fd, function (err)
					fn (err, t, u)
				end)
			end)
		end)
	elseif FS.exists_sync (".hg") then
		local fd = FS.open (".hg/hgrc", "r", 0644, function (err, fd)
			-- TODO
		end)
		p ("TODO", "hg")
	else
		p ("ERROR", "unknown repository")
	end
end

local FS = require ("fs")
local home = process.env['HOME']
FS.read_file (home.."/.lum/config", function (err, data)
	if not err then
		-- TODO: process env override config? --
		local ls = split (data, "\n") 
		for i=1,#ls do
			local row = split (ls[i], "=")
			if (row and row[1] and row[2]) then
				process.env[row[1]] = row[2]
			end
		end
	end

	-- hacky! use a table
	Lumit:init (function ()
		local a0 = process.argv[1]
		if not a0 then
			Lumit:deps (function()
				Lumit:build ()
			end)
		elseif a0 == "build" or a0 == "-b" then
			Lumit:build ()
		elseif a0 == "deps" or a0 == "-d" then
			Lumit:deps()
		elseif a0 == "clean" or a0 == "-c" then
			Lumit:clean ()
		elseif a0 == "search" or a0 == "-s" then
			Lumit:search (process.argv[2])
		elseif a0 == "install" or a0 == "-i" then
			Lumit:install (process.argv[2])
		elseif a0 == "deploy" or a0 == "-D" then
			Lumit:deploy (process.argv[2])
		elseif a0 == "remove" or a0 == "rm" or a0 == "-r" then
			Lumit:uninstall (process.argv[2])
		elseif a0 == "-u" or a0 == "update" then
			Lumit:update ()
		elseif a0 == "list" or a0 == "-l" or a0 == "ls" then
			Lumit:list ()
		elseif a0 == "help" or a0 == "-h" then
			show_help ()
		elseif a0 == "info" or a0 == "-I" then
			Lumit:info (process.argv[2], function (pkg)
				p ("PKG", pkg)
			end)
		elseif a0 == "json" or a0 == "-j" then
			print ("[")
			if process.argv[2] then
				local dir = process.argv[2]
				if not (dir:sub(1,1) == "/") then
					dir = process.cwd ().."/"..dir
				end
				FS.readdir (dir, function (err, files)
					if err then
						p ("ERROR", "readdir")
						process.exit (1)
					end
					local ctr = #files
					for i=1,#files do
						showjson (dir.."/"..files[i].."/package", function (x)
							ctr = ctr-1
							if not x then return end
							if ctr == 0 then 
								print (x)
								print ("]")
							else
								print (x..",")
							end
						end)
					end
				end)
			else
				showjson (nil, function (x)
					print (x)
					print ("]")
				end)
			end
		else
			p ("ERROR", "Unknown argument: ".. a0)
		end
	end)
end)

function showjson(path, fn)
	Lumit:info (path, function (pkg)
		if not pkg then 
			fn (nil)
			return
		end
		local j = {}
		j.name = pkg.name
		j.version = pkg.version
		j.description = pkg.description
		getsource (function (err, t, u)
			j['type'] = t
			j['url'] = u
			fn (JSON.encode (j))
		end)
	end)
end
